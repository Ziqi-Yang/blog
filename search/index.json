[{"content":" Category:Package development - ArchWiki Notes on creating packages for the Arch User Repository (AUR) ","date":"2023-01-09T00:00:00+08:00","permalink":"https://blog.animer.live/posts/aur_contribution_guide/","title":"AUR Contribution Guide"},{"content":"I am using dotdrop to manage my dot files. If you don\u0026rsquo;t use it, it\u0026rsquo;s fine, but you may need to do a some extra work to make things done. For those who manually copy and paste their dot files, I highly recommend you to try it out. It can automate your copy-paste flow, and it is highly customizable. It can save you a lot of time dealing with chores. (Nix OS users should ignore what I said)\nThe conditions can be divided into two:\nSecrets are only some small pieces of code in your dot files. For example, you write a web spider to collect your personal information on a website, but the script file contains your cookie. It can be annoying that you want to share your code and protect your privacy at the same time while using the current dot file automatic workflow. You are in an awkward position. Secrets are individual files. The problem can be solved with encryption technology. We will use gpg to encrypt secrets. For those who haven\u0026rsquo;t set their gpg keys, I recommend them to read through GnuPG - ArchWiki, which is comprehensive and practical.\nSolve the First Condition To deal with those few but annoying secrets, we can use sed to replace the original secrets with encrypted code. For example, we have a file whose content look like this:\n1 2 3 4 char * pass = \u0026#34;notapassword\u0026#34;; printf(\u0026#34;What\u0026#39;s your name?\u0026#34;); printf(\u0026#34;My name is %s.\u0026#34;, name); We want to change the string notapassword in the first line to an encrypted string which can only be decrypted by ourselves. What should we do?\nEncrypt Secrets First, Get the secret needed to be encrypted To get the secret string, we can either manually copy the content if we can ensure that it will not change in the later update or using sed command. Here I\u0026rsquo;d like to briefly introduce the second option.\nIf your match regex is robust(deal with all input and only output a single pattern), like this regex:\n1 char \\* pass = \u0026#34;\\(.*\\)\u0026#34;; Then the following command will only print out the single password notapassword\n1 2 3 sed -n \u0026#39;s/char \\* pass = \u0026#34;\\(.*\\)\u0026#34;;/\\1/p\u0026#39; # test it with: # printf \u0026#39;char * pass = \u0026#34;notapassword\u0026#34;;\\n\u0026#34;hello\u0026#34;\\n\u0026#34;world\u0026#34;\\n\u0026#39; | sed -n \u0026#39;s/char \\* pass = \u0026#34;\\(.*\\)\u0026#34;;/\\1/p\u0026#39; or If you want to restrict the output to a specific range, you can execute the following command:\n1 2 sed -n \u0026#39;1,3s/char \\* pass = \u0026#34;\\(.*\\)\u0026#34;;/\\1/p\u0026#39; # processing input is 1st to 3st lines sed -n \u0026#39;1s/char \\* pass = \u0026#34;\\(.*\\)\u0026#34;;/\\1/p\u0026#39; # processing input is the first line Second, encrypt the secret using GPG and base64 Continuing with the above example, here we already have the secret string notapassword, we then need to encrypt it into a non-breaking string:\n1 echo \u0026#34;notapassword\u0026#34; | gpg -ea -r 389582ABC15D64CCFB74D82F934AE9B6B6E9FF34 Note 389582ABC15D64CCFB74D82F934AE9B6B6E9FF34 is the keyid of the key which you want to use to encrypt the string. Toe know your keyid, please execute command gpg --list-keys:\n1 2 3 4 5 6 7 $ gpg --list-keys /home/zarkli/.gnupg/pubring.kbx ------------------------------- pub rsa3072 2023-01-06 [SC] 389582ABC15D64CCFB74D82F934AE9B6B6E9FF34 uid [ultimate] Ziqi Yang \u0026lt;mr.ziqiyang@gmail.com\u0026gt; sub rsa3072 2023-01-06 [E] Since we use gpg to encrypt the string(actually use the public key to encrypt string), we can confirm that unless our private key has leaked out, only ourselves can decrypt the string.\nNow that we have gotten the encrypted string, which should be like:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 -----BEGIN PGP MESSAGE----- hQGMA/6ct2lNSe5lAQv+Ik4O4O6gBT8rVDPS/96xHYGUxeokFPKEgrl9QQiAjSTY D9wcmbxLe9319fI05dO6oJSsam9dgjUKBt42M4PkRjHX3PwZex+O3TYmrxo3zFfg S4RWxGp2yWJ0/7wbILj1bFLo3bg3LKkkDmPZzK5KWosb0N0G/lR+mvzzDzm6yVYw e8oR3vs/UefPxF0LiOo9kD4vTI0MgGb6i9dcgLbg08TspeDwiAcStH8QkQFnH8N/ ZQgK1mlblccpTUTsVOuUsslgw/sXpElbBUBUS6ftOzVlqbQMJR0lWYJzl5t/sz+a 4FqkINYp55mQpdpbaTBZ32c8BQvCK6HDZLFc20rhQIg7KPraiDzboHBQIc7pWmml 6QyrkZAxyh3GORuiSPtk74JuUHfO9NbGWn8kwBhkIyR7ecd6BGQYjvsRUW3385Vb 4DZd5rf2j1cVTlx854uwkmb6KE+5bmcjUd/CYcJ1oDPLNQcPBJYZ2wdojnvCJBAV nnfzy1kAv+eYlUYtl2qS0kgBIe0B8h/cUU2wsWf4mCukT7aBRjdJH0pWjZrkrTUX urhaA1bQuYSERtQ5DsAxh0TGvXLp4G1y8Hg5J3d7YPSTBc+b/cynG/A= =xiNF -----END PGP MESSAGE----- To get one line string, we can either extract the content in the middle of the encrypted data, or use base64 algorithm to encrypt it. I will introduce the second method.\n1 echo \u0026#34;notapassword\u0026#34; | gpg -ea -r 389582ABC15D64CCFB74D82F934AE9B6B6E9FF34 | base64 -w 0 -w 0 means don\u0026rsquo;t add line wrap in the base64 encrypted data. By default, base64 will add a line wrap after every 76 characters.\nThird, replace the secret with the encrypted string. We can use a variable to store the previous encrypted string, and the insert the content into the original place.\n1 2 3 4 sed \u0026#39;s/char \\* pass = \u0026#34;\\(.*\\)\u0026#34;;/char \\* pass = \u0026#34;\u0026#39;$a\u0026#39;\u0026#34;;/\u0026#39; # test it with: # a=$(echo \u0026#34;notapassword\u0026#34; | gpg -ea -r 389582ABC15D64CCFB74D82F934AE9B6B6E9FF34 | base64 -w 0) # printf \u0026#39;char * pass = \u0026#34;notapassword\u0026#34;;\\n\u0026#34;hello\u0026#34;\\n\u0026#34;world\u0026#34;\\n\u0026#39; | sed \u0026#39;s/char \\* pass = \u0026#34;\\(.*\\)\u0026#34;;/char \\* pass = \u0026#34;\u0026#39;$a\u0026#39;\u0026#34;;/\u0026#39; Note that under bash environment, string between single quote is raw(e.g. '$a' means exactly '$a' ), and if you want to insert variables into the string, use nested single quote(e.g. ''$a'' means 'hello' if $a equals to 'hello').\nSidenote: Decryption 1 echo \u0026#34;notapassword\u0026#34; | gpg -ea -r 389582ABC15D64CCFB74D82F934AE9B6B6E9FF34 | base64 -w 0 | base64 -d | gpg -d Automate Dot Files Management Workflow Please refer to Handle secrets and Transformations entry sections of dotdrop.\nSide Note: For write transformations, {0} and {1} in the \u0026rsquo;transformations entry\u0026rsquo; section means the source file path and the temporary file path. The temporary file will be firstly copied from source file, and then you can modify it in the script. Afterward dotdrop will import it into your repo.\nSecond Condition I have no energy to write more (____). Please refer to the first condition.\nLinks GPG GnuPG - ArchWiki GPG encrypting a string into another single-line string DotDrop Docs Handle secrets Transformations entry ","date":"2023-01-09T00:00:00+08:00","permalink":"https://blog.animer.live/posts/hide-secrets-in-your-dotfile/","title":"Hide Secrets in Your Dot Files on Public Repository"},{"content":"Recently, I self-learned the cs61c(su20) class, which requires you to write a risc-v program to make a simple neural network in the project 2. It could be annoying that you write some bug in the assembly since the debug condition is frustrating. After all, through the project I learned a lot about risc-v, especially the calling conventions(at the beginning I haven\u0026rsquo;t paid much attention to it, and it had really caused a lot of problems to my work). After all, I summarized some things that seem important to risc-v assembly coding.\nCalling Conventions It is very important to assembly coding. To make things work properly, you should follow calling conventions, especially when your project grows bigger and bigger.\nThe Caller\u0026rsquo;s Responsibility The caller should manage its temporary variables like t0, a0 and ra. Since these variables are used for temporary purposes and in many cases many temporary variables are randomly used, the callee have no responsibility to save the caller\u0026rsquo;s temporary variables, which makes variable management easy.\nWhen the caller calls a function, make sure you have stored those temporary variables which carries information through the processes. The following demo demonstrates the principle:\n1 2 3 4 5 6 7 8 9 10 11 12 # condition: the special value \u0026#39;1\u0026#39; needed to be used after calling a function ## good example li t0, 1 mv s1, t0 # save t0 to s1, or save it to the stack jal function # use s1 ## bad example li t0, 1 jal function # may change t0 # use t0 The Callee\u0026rsquo;s Responsibility The callee should save the long-life variables(like s0) before doing its work, and revert them after the work before return. However, there are many long-life variables(12 variables\u0026rsquo; name begins with the character \u0026rsquo;s\u0026rsquo;), should we save all of them? Absolutely no. You only need to save those variables that will be used in the following callee\u0026rsquo;s work. For example:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 function: addi sp, sp, -12 # you can write the size in the final cause sometimes you need to use # more long-life variables than you decided at the beginning sw s0, 0(sp) sw s1, 4(sp) sw ra, 8(sp) # usually save ra along with s-variables is a good practice # your work lw s0, 0(sp) lw s1, 4(sp) lw ra, 8(sp) # usually save ra along with s-variables is a good practice addi sp, sp, 12 ret Multiple File Example main file\n1 2 3 4 5 6 7 8 9 10 11 12 .import ../../src/write_matrix.s .import ../../src/utils.s .data m0: .word 1, 2, 3, 4, 5, 6, 7, 8, 9 file_path: .asciiz \u0026#34;outputs/test_write_matrix/student_write_outputs.bin\u0026#34; .text main: la s0, m0 # poiner to int array la s1, file_path # string # code function file\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #define c_printHex 34 # ecall wrappers .globl print_int, print_str, atoi, sbrk, exit, print_char, fopen, fread, fwrite, fclose, exit2, fflush, ferror, print_hex # helper functions .globl file_error, print_int_array, malloc, free, print_num_alloc_blocks, num_alloc_blocks .data error_string: .string \u0026#34;This library file should not be directly called!\u0026#34; .text # Exits if you run this file main: la a1 error_string jal print_str li a1 1 jal exit2 print_int: # code ret print_char: # code ret It should be noticed that the exposing function(label) only exposed its label name and address (my understanding), and its end is the ret, however the compiler doesn\u0026rsquo;t know where its end is.\nPass Command Line Arguments to the Program If you don\u0026rsquo;t change a-beginning variables at the beginning, then a0 is argc (int type), and a1 is argv (char ** type). RISC-V handles command line arguments in the same way as C, which means a1[0] is the program itself. You can load command line arguments like this:\n1 2 3 4 5 6 # a1: char **, and char * is address, costs for 4 bytes # 0(a1) stands for the program itself lw s0, 4(a1) lw s1, 8(a1) lw s2, 12(a1) lw s3, 16(a1) Ecall - The Environmental Calls You can refer to venus - Environmental Call. The starter code for the project2 is also a good example: https://github.com/61c-teach/su20-proj2-starter/blob/master/src/utils.s\nResources resc-v reference and large version unoffical risc-v manual venus wiki it contains useful information like Assembler Directives and Environmental Calls cs61c venus reference mainly about venus tool, but also contains some RISC-V knowledge ","date":"2023-01-04T00:00:00+08:00","permalink":"https://blog.animer.live/posts/risc-v-learning-summary/","title":"Risc-V Learning Summary"},{"content":"Installation I choose hyprland as my Wayland window manager(and compositor) which is based on wlroots, it is a really new compositor with a lot of great features, and also it is pretty stable(according to the office). Here is the stars over time charts for it:\nFigure 1: Hyprland Stars Over Time\n1 2 3 4 5 6 7 # glfw-wayland is conflict with glfw-x11 paru -S hyprland-git xorg-xwayland xorg-xlsclients qt5-wayland glfw-wayland qt6-wayland paru -S dunst wireplumber pipewire polkit-kde-agent xdg-desktop-portal-hyprland-git # must-have (from hyprland-wiki) paru -S wev # xev paru -S wl-clipboard # xclip paru -S wtype # xdotool applications 1 2 3 4 5 6 paru -S hyprpaper # wallpaper manager under hyprland paru -S rofi-lbonn-wayland-git # rofi under Wayland paru -S waybar-hyprland-git # waybar hyprland (enhanced?) paru -S hyprpick # color picker paru -S grim slurp swappy # screenshot (swappy is a GUI annotation client for grim+slurp combination, which is enough for screenshot) paru -S gammastep # screen gamma, alternative for redshift Emacs Under Wayland Please use Emacs with pgtk (pure GTK) build to support Wayland. The 29 version of Emacs officially support build with pgtk flag=. You can simply get it from AUR:\n1 paru -S emacs29-git Customization cursor: https://wiki.hyprland.org/FAQ/index.html#how-do-i-change-me-mouse-cursor https://github.com/swaywm/sway/wiki/GTK-3-settings-on-Wayland Problems nm-applet not appears on Waybar tray (at least for me), so I use nmtui in terminal to manage my network connection instead. megasync not working properly jetbrains-toolbox not appears on the Waybar tray. Links: Applications https://arewewaylandyet.com/ https://wiki.hyprland.org/Useful-Utilities/ https://github.com/swaywm/sway/wiki/Useful-add-ons-for-sway Guides Full Wayland Setup on Arch Linux ","date":"2022-12-22T00:00:00+08:00","permalink":"https://blog.animer.live/posts/switch_to_wayland/","title":"Switch to Wayland"},{"content":"lsp-java is an awesome package for lsp-mode to open a java project. However, after some testing, I found it has difficulty in importing third party libraries with pure java project(not use maven, Gradle). Moreover, it only has a limited ability to interact with a Gradle project. However, it has great support for maven project, which means we can use maven to import third party java libraries. This article will focus on import a local library by maven.\nInitialize a project 1 2 mvn -B archetype:generate -DgroupId=PacMan -DartifactId=PacMan -Darchet ypeArtifactId=maven-archetype-quickstart -DarchetypeVersion=1.4 This command will create a folder named PacMan=(=artifactId), where there is folder called src, and its structure is like:\n1 2 3 4 ├── src │ ├── main │ │ └── java │ │ └── PacMan(`groudId`) If your groupId is \u0026ldquo;com.pacman.xx\u0026rdquo;, then the directory structure may be like:\n1 2 3 4 5 6 ├── src │ ├── main │ │ └── java │ │ └── com └── pacman └── xx In our example, you can write code in the pacman folder.\nSpecify java version: edit pom.xml file in the project root directory\n1 2 3 4 5 6 7 8 9 10 11 12 13 \u0026lt;project xmlns=\u0026#34;http://maven.apache.org/POM/4.0.0\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\u0026#34;\u0026gt; \u0026lt;!-- ... --\u0026gt; \u0026lt;properties\u0026gt; \u0026lt;project.build.sourceEncoding\u0026gt;UTF-8\u0026lt;/project.build.sourceEncoding\u0026gt; \u0026lt;maven.compiler.source\u0026gt;17\u0026lt;/maven.compiler.source\u0026gt; \u0026lt;maven.compiler.target\u0026gt;17\u0026lt;/maven.compiler.target\u0026gt; \u0026lt;/properties\u0026gt; \u0026lt;!-- ... --\u0026gt; \u0026lt;/project\u0026gt; Add third party libriary 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 \u0026lt;project xmlns=\u0026#34;http://maven.apache.org/POM/4.0.0\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\u0026#34;\u0026gt; \u0026lt;!-- ... --\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;!-- ... --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;ucd.comp2011j\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;game-engine\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.00\u0026lt;/version\u0026gt; \u0026lt;scope\u0026gt;system\u0026lt;/scope\u0026gt; \u0026lt;systemPath\u0026gt;${basedir}/libs/COMP2011J.Game.Engine.jar\u0026lt;/systemPath\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;!-- ... --\u0026gt; \u0026lt;/project\u0026gt; Note that ${basedir} stands for the directory that pom.xml located.\nRun Project: create a Makefile in the project root directory:\n1 2 3 4 5 6 7 8 all: compile compile: mvn package java -cp \u0026#34;target/PacMan-1.0-SNAPSHOT.jar:\u0026lt;your third party libriary relative path\u0026gt;\u0026#34; PacMan.GameStart # \u0026lt;Package Name\u0026gt;.\u0026lt;Class Name\u0026gt; clean: mvn clean Use command make to run, and make clean to clean\nIn doom emacs, you can type \u0026lt;SPC\u0026gt;pR and enter make to run the project\n","date":"2022-12-21T00:00:00+08:00","permalink":"https://blog.animer.live/posts/emacs-lsp-java-project-settings/","title":"Emacs lsp-java Project Settings"},{"content":"use t or T to control the sed workflow.(more)\n1 2 sed -i \u0026#34;s/animations = true/animations = false/;t;\\ s/animations = false/animations = true/\u0026#34; \u0026#34;$picom_config\u0026#34; Reference How to toggle a comment in a line using sed Sed/Branching-and-flow-control ","date":"2022-12-21T00:00:00+08:00","permalink":"https://blog.animer.live/posts/if-else-in-sed/","title":"If Else In Sed"},{"content":" 1 2 3 4 (setq doom-font (font-spec :family \u0026#34;FiraCode Nerd Font\u0026#34; :size 34) ;; :wight light ;; don\u0026#39;t set size for doom-unicode-font, or the size won\u0026#39;t be changed doom-unicode-font (font-spec :family \u0026#34;LXGW WenKai\u0026#34;)) ;; CJK font ","date":"2022-11-14T00:00:00Z","permalink":"https://blog.animer.live/posts/doom_emacs_chinese_font/","title":"Doom Emacs Set Chinese Font"}]