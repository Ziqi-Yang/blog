#+title: Hide Secrets in Your Dot Files on Public Repository
#+date:  <2023-01-06 Fri>
#+hugo_lastmod: <2023-01-06 Fri>
#+hugo_base_dir: ../
#+hugo_categories: Rice
#+hugo_tags: rice dotfile shell
#+description: When upload your dot files repo to host, secrets in some files(maybe one or two lines) could make you feel crazy about whether or not should you make the repo public. However, there is a trick to handle the awkward situation.

I am using [[https://github.com/deadc0de6/dotdrop][dotdrop]] to manage my dot files. If you don't use it, it's fine, but you may need to do a some extra work to make things done. For those who manually copy and paste their dot files, I highly recommend you to try it out. It can automate your copy-paste flow, and it is highly customizable. It can save you a lot of time dealing with chores. (Nix OS users should ignore what I said)

The conditions can be divided into two:
  1. Secrets are only some small pieces of code in your dot files. For example, you write a web spider to collect your personal information on a website, but the script file contains your cookie. It can be annoying that you want to share your code and protect your privacy at the same time while using the current dot file automatic workflow. You are in an awkward position.
  2. Secrets are individual files.

The problem can be solved with =encryption= technology. We will use =gpg= to encrypt secrets. For those who haven't set their =gpg keys=, I recommend them to read through [[https://wiki.archlinux.org/title/GnuPG][GnuPG - ArchWiki]], which is comprehensive and practical.

* Solve the First Condition
To deal with those few but annoying secrets, we can use =sed= to replace the original secrets with encrypted code. For example, we have a file whose content look like this:

#+begin_src plain
char * pass = "notapassword";

printf("What's your name?");
printf("My name is %s.", name);
#+end_src

We want to change the string =notapassword= in the =first= line to an encrypted string which can only be decrypted by ourselves. What should we do?

** First, Get the secret needed to be encrypted
To get the secret string, we can either manually copy the content if we can ensure that it will not change in the later update or using =sed= command. Here I'd like to briefly introduce the second option.

If your match regex is robust(deal with all input and only output a single pattern), like this regex:
#+begin_src bash
char \* pass = "\(.*\)";
#+end_src

Then the following command will only print out the single password =notapassword=

#+begin_src bash
sed -n 's/char \* pass = "\(.*\)";/\1/p'
#+end_src

or If you want to restrict the output to a specific range, you can execute the following command:

#+begin_src bash
sed -n '1,3s/char \* pass = "\(.*\)";/\1/p' # processing input is 1st to 3st lines
sed -n '1s/char \* pass = "\(.*\)";/\1/p' # processing input is the first line
#+end_src

** Second, encrypt the secret using GPG and base64
Continuing with the above example, here we already have the secret string =notapassword=, we then need to encrypt it into a non-breaking string:
#+begin_src bash
echo "notapassword" | gpg -ea -r 389582ABC15D64CCFB74D82F934AE9B6B6E9FF34
#+end_src



* Links
** GPG
1. [[https://wiki.archlinux.org/title/GnuPG][GnuPG - ArchWiki]]
2. [[https://disjoint.ca/til/2017/09/23/gpg-encrypting-a-string-into-another-single-line-string/][GPG encrypting a string into another single-line string]]
** DotDrop Docs
1. [[https://dotdrop.readthedocs.io/en/latest/howto/sensitive-dotfiles/][Handle secrets]]
2. [[https://dotdrop.readthedocs.io/en/latest/config/config-transformations/][Transformations entry]]
