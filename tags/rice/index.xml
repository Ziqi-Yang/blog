<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>rice on MeowKing</title><link>https://blog.animer.live/tags/rice/</link><description>Recent content in rice on MeowKing</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 09 Jan 2023 00:00:00 +0800</lastBuildDate><atom:link href="https://blog.animer.live/tags/rice/index.xml" rel="self" type="application/rss+xml"/><item><title>Hide Secrets in Your Dot Files on Public Repository</title><link>https://blog.animer.live/posts/hide-secrets-in-your-dotfile/</link><pubDate>Mon, 09 Jan 2023 00:00:00 +0800</pubDate><guid>https://blog.animer.live/posts/hide-secrets-in-your-dotfile/</guid><description>&lt;p>I am using &lt;a class="link" href="https://github.com/deadc0de6/dotdrop" target="_blank" rel="noopener"
>dotdrop&lt;/a> to manage my dot files. If you don&amp;rsquo;t use it, it&amp;rsquo;s fine, but you may need to do a some extra work to make things done. For those who manually copy and paste their dot files, I highly recommend you to try it out. It can automate your copy-paste flow, and it is highly customizable. It can save you a lot of time dealing with chores. (Nix OS users should ignore what I said)&lt;/p>
&lt;p>The conditions can be divided into two:&lt;/p>
&lt;ol>
&lt;li>Secrets are only some small pieces of code in your dot files. For example, you write a web spider to collect your personal information on a website, but the script file contains your cookie. It can be annoying that you want to share your code and protect your privacy at the same time while using the current dot file automatic workflow. You are in an awkward position.&lt;/li>
&lt;li>Secrets are individual files.&lt;/li>
&lt;/ol>
&lt;p>The problem can be solved with &lt;code>encryption&lt;/code> technology. We will use &lt;code>gpg&lt;/code> to encrypt secrets. For those who haven&amp;rsquo;t set their &lt;code>gpg keys&lt;/code>, I recommend them to read through &lt;a class="link" href="https://wiki.archlinux.org/title/GnuPG" target="_blank" rel="noopener"
>GnuPG - ArchWiki&lt;/a>, which is comprehensive and practical.&lt;/p>
&lt;h2 id="solve-the-first-condition">Solve the First Condition&lt;/h2>
&lt;p>To deal with those few but annoying secrets, we can use &lt;code>sed&lt;/code> to replace the original secrets with encrypted code. For example, we have a file whose content look like this:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">char * pass = &amp;#34;notapassword&amp;#34;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">printf(&amp;#34;What&amp;#39;s your name?&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">printf(&amp;#34;My name is %s.&amp;#34;, name);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>We want to change the string &lt;code>notapassword&lt;/code> in the &lt;code>first&lt;/code> line to an encrypted string which can only be decrypted by ourselves. What should we do?&lt;/p>
&lt;h3 id="encrypt-secrets">Encrypt Secrets&lt;/h3>
&lt;h4 id="first-get-the-secret-needed-to-be-encrypted">First, Get the secret needed to be encrypted&lt;/h4>
&lt;p>To get the secret string, we can either manually copy the content if we can ensure that it will not change in the later update or using &lt;code>sed&lt;/code> command. Here I&amp;rsquo;d like to briefly introduce the second option.&lt;/p>
&lt;p>If your match regex is robust(deal with all input and only output a single pattern), like this regex:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">char &lt;span class="se">\*&lt;/span> &lt;span class="nv">pass&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;\(.*\)&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Then the following command will only print out the single password &lt;code>notapassword&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sed -n &lt;span class="s1">&amp;#39;s/char \* pass = &amp;#34;\(.*\)&amp;#34;;/\1/p&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># test it with:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># printf &amp;#39;char * pass = &amp;#34;notapassword&amp;#34;;\n&amp;#34;hello&amp;#34;\n&amp;#34;world&amp;#34;\n&amp;#39; | sed -n &amp;#39;s/char \* pass = &amp;#34;\(.*\)&amp;#34;;/\1/p&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>or If you want to restrict the output to a specific range, you can execute the following command:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sed -n &lt;span class="s1">&amp;#39;1,3s/char \* pass = &amp;#34;\(.*\)&amp;#34;;/\1/p&amp;#39;&lt;/span> &lt;span class="c1"># processing input is 1st to 3st lines&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sed -n &lt;span class="s1">&amp;#39;1s/char \* pass = &amp;#34;\(.*\)&amp;#34;;/\1/p&amp;#39;&lt;/span> &lt;span class="c1"># processing input is the first line&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="second-encrypt-the-secret-using-gpg-and-base64">Second, encrypt the secret using GPG and base64&lt;/h4>
&lt;p>Continuing with the above example, here we already have the secret string &lt;code>notapassword&lt;/code>, we then need to encrypt it into a non-breaking string:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;notapassword&amp;#34;&lt;/span> &lt;span class="p">|&lt;/span> gpg -ea -r 389582ABC15D64CCFB74D82F934AE9B6B6E9FF34
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Note &lt;code>389582ABC15D64CCFB74D82F934AE9B6B6E9FF34&lt;/code> is the &lt;code>keyid&lt;/code> of the key which you want to use to encrypt the string. Toe know your &lt;code>keyid&lt;/code>, please execute command &lt;code>gpg --list-keys&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ gpg --list-keys
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/home/zarkli/.gnupg/pubring.kbx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-------------------------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pub rsa3072 2023-01-06 &lt;span class="o">[&lt;/span>SC&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 389582ABC15D64CCFB74D82F934AE9B6B6E9FF34
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">uid &lt;span class="o">[&lt;/span>ultimate&lt;span class="o">]&lt;/span> Ziqi Yang &amp;lt;mr.ziqiyang@gmail.com&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sub rsa3072 2023-01-06 &lt;span class="o">[&lt;/span>E&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Since we use &lt;code>gpg&lt;/code> to encrypt the string(actually use the public key to encrypt string), we can confirm that unless our private key has leaked out, only ourselves can decrypt the string.&lt;/p>
&lt;p>Now that we have gotten the encrypted string, which should be like:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">-----BEGIN PGP MESSAGE-----
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">hQGMA/6ct2lNSe5lAQv+Ik4O4O6gBT8rVDPS/96xHYGUxeokFPKEgrl9QQiAjSTY
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">D9wcmbxLe9319fI05dO6oJSsam9dgjUKBt42M4PkRjHX3PwZex+O3TYmrxo3zFfg
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">S4RWxGp2yWJ0/7wbILj1bFLo3bg3LKkkDmPZzK5KWosb0N0G/lR+mvzzDzm6yVYw
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">e8oR3vs/UefPxF0LiOo9kD4vTI0MgGb6i9dcgLbg08TspeDwiAcStH8QkQFnH8N/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ZQgK1mlblccpTUTsVOuUsslgw/sXpElbBUBUS6ftOzVlqbQMJR0lWYJzl5t/sz+a
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">4FqkINYp55mQpdpbaTBZ32c8BQvCK6HDZLFc20rhQIg7KPraiDzboHBQIc7pWmml
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">6QyrkZAxyh3GORuiSPtk74JuUHfO9NbGWn8kwBhkIyR7ecd6BGQYjvsRUW3385Vb
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">4DZd5rf2j1cVTlx854uwkmb6KE+5bmcjUd/CYcJ1oDPLNQcPBJYZ2wdojnvCJBAV
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nnfzy1kAv+eYlUYtl2qS0kgBIe0B8h/cUU2wsWf4mCukT7aBRjdJH0pWjZrkrTUX
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">urhaA1bQuYSERtQ5DsAxh0TGvXLp4G1y8Hg5J3d7YPSTBc+b/cynG/A=
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">=xiNF
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-----END PGP MESSAGE-----
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>To get one line string, we can either extract the content in the middle of the encrypted data, or use &lt;code>base64&lt;/code> algorithm to encrypt it. I will introduce the second method.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;notapassword&amp;#34;&lt;/span> &lt;span class="p">|&lt;/span> gpg -ea -r 389582ABC15D64CCFB74D82F934AE9B6B6E9FF34 &lt;span class="p">|&lt;/span> base64 -w &lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>-w 0&lt;/code> means don&amp;rsquo;t add line wrap in the &lt;code>base64&lt;/code> encrypted data. By default, &lt;code>base64&lt;/code> will add a line wrap after every 76 characters.&lt;/p>
&lt;h4 id="third-replace-the-secret-with-the-encrypted-string-dot">Third, replace the secret with the encrypted string.&lt;/h4>
&lt;p>We can use a variable to store the previous encrypted string, and the insert the content into the original place.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sed &lt;span class="s1">&amp;#39;s/char \* pass = &amp;#34;\(.*\)&amp;#34;;/char \* pass = &amp;#34;&amp;#39;&lt;/span>&lt;span class="nv">$a&lt;/span>&lt;span class="s1">&amp;#39;&amp;#34;;/&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># test it with:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># a=$(echo &amp;#34;notapassword&amp;#34; | gpg -ea -r 389582ABC15D64CCFB74D82F934AE9B6B6E9FF34 | base64 -w 0)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># printf &amp;#39;char * pass = &amp;#34;notapassword&amp;#34;;\n&amp;#34;hello&amp;#34;\n&amp;#34;world&amp;#34;\n&amp;#39; | sed &amp;#39;s/char \* pass = &amp;#34;\(.*\)&amp;#34;;/char \* pass = &amp;#34;&amp;#39;$a&amp;#39;&amp;#34;;/&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Note that under bash environment, string between single quote is raw(e.g. &lt;code>'$a'&lt;/code> means exactly &lt;code>'$a'&lt;/code> ), and if you want to insert variables into the string, use nested single quote(e.g. &lt;code>''$a''&lt;/code> means &lt;code>'hello'&lt;/code> if &lt;code>$a&lt;/code> equals to &lt;code>'hello'&lt;/code>).&lt;/p>
&lt;h4 id="sidenote-decryption">Sidenote: Decryption&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;notapassword&amp;#34;&lt;/span> &lt;span class="p">|&lt;/span> gpg -ea -r 389582ABC15D64CCFB74D82F934AE9B6B6E9FF34 &lt;span class="p">|&lt;/span> base64 -w &lt;span class="m">0&lt;/span> &lt;span class="p">|&lt;/span> base64 -d &lt;span class="p">|&lt;/span> gpg -d
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="automate-dot-files-management-workflow">Automate Dot Files Management Workflow&lt;/h3>
&lt;p>Please refer to &lt;a class="link" href="https://dotdrop.readthedocs.io/en/latest/howto/sensitive-dotfiles/" target="_blank" rel="noopener"
>Handle secrets&lt;/a> and &lt;a class="link" href="https://dotdrop.readthedocs.io/en/latest/config/config-transformations/" target="_blank" rel="noopener"
>Transformations entry&lt;/a> sections of &lt;code>dotdrop&lt;/code>.&lt;/p>
&lt;blockquote>
&lt;p>Side Note: For write transformations, {0} and {1} in the &amp;rsquo;transformations entry&amp;rsquo; section means the source file path and the temporary file path. The temporary file will be firstly copied from source file, and then you can modify it in the script. Afterward dotdrop will import it into your repo.&lt;/p>
&lt;/blockquote>
&lt;h2 id="second-condition">Second Condition&lt;/h2>
&lt;p>I have no energy to write more (&lt;code>____&lt;/code>). Please refer to the first condition.&lt;/p>
&lt;h2 id="links">Links&lt;/h2>
&lt;h3 id="gpg">GPG&lt;/h3>
&lt;ol>
&lt;li>&lt;a class="link" href="https://wiki.archlinux.org/title/GnuPG" target="_blank" rel="noopener"
>GnuPG - ArchWiki&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://disjoint.ca/til/2017/09/23/gpg-encrypting-a-string-into-another-single-line-string/" target="_blank" rel="noopener"
>GPG encrypting a string into another single-line string&lt;/a>&lt;/li>
&lt;/ol>
&lt;h3 id="dotdrop-docs">DotDrop Docs&lt;/h3>
&lt;ol>
&lt;li>&lt;a class="link" href="https://dotdrop.readthedocs.io/en/latest/howto/sensitive-dotfiles/" target="_blank" rel="noopener"
>Handle secrets&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://dotdrop.readthedocs.io/en/latest/config/config-transformations/" target="_blank" rel="noopener"
>Transformations entry&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>Switch to Wayland</title><link>https://blog.animer.live/posts/switch_to_wayland/</link><pubDate>Thu, 22 Dec 2022 00:00:00 +0800</pubDate><guid>https://blog.animer.live/posts/switch_to_wayland/</guid><description>&lt;h2 id="installation">Installation&lt;/h2>
&lt;p>I choose &lt;a class="link" href="https://github.com/hyprwm/Hyprland" target="_blank" rel="noopener"
>hyprland&lt;/a> as my Wayland window manager(and compositor) which is based on &lt;code>wlroots&lt;/code>, it is a really new compositor with a lot of great features, and also it is pretty stable(according to the office). Here is the &lt;em>stars over time&lt;/em> charts for it:&lt;/p>
&lt;figure>&lt;img src="https://starchart.cc/hyprwm/Hyprland.svg"
alt="Figure 1: Hyprland Stars Over Time"/>&lt;figcaption>
&lt;p>&lt;span class="figure-number">Figure 1: &lt;/span>Hyprland Stars Over Time&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># glfw-wayland is conflict with glfw-x11&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">paru -S hyprland-git xorg-xwayland xorg-xlsclients qt5-wayland glfw-wayland qt6-wayland
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">paru -S dunst wireplumber pipewire polkit-kde-agent xdg-desktop-portal-hyprland-git &lt;span class="c1"># must-have (from hyprland-wiki)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">paru -S wev &lt;span class="c1"># xev&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">paru -S wl-clipboard &lt;span class="c1"># xclip&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">paru -S wtype &lt;span class="c1"># xdotool&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="applications">applications&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">paru -S hyprpaper &lt;span class="c1"># wallpaper manager under hyprland&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">paru -S rofi-lbonn-wayland-git &lt;span class="c1"># rofi under Wayland&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">paru -S waybar-hyprland-git &lt;span class="c1"># waybar hyprland (enhanced?)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">paru -S hyprpick &lt;span class="c1"># color picker&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">paru -S grim slurp swappy &lt;span class="c1"># screenshot (swappy is a GUI annotation client for grim+slurp combination, which is enough for screenshot)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">paru -S gammastep &lt;span class="c1"># screen gamma, alternative for redshift&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="emacs-under-wayland">Emacs Under Wayland&lt;/h2>
&lt;p>Please use Emacs with &lt;code>pgtk&lt;/code> (pure GTK) build to support Wayland. The 29 version of Emacs officially support build with &lt;code>pgtk&lt;/code> flag=. You can simply get it from AUR:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-Bash" data-lang="Bash">&lt;span class="line">&lt;span class="cl">paru -S emacs29-git
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="customization">Customization&lt;/h2>
&lt;ol>
&lt;li>cursor:
&lt;ol>
&lt;li>&lt;a class="link" href="https://wiki.hyprland.org/FAQ/index.html#how-do-i-change-me-mouse-cursor" target="_blank" rel="noopener"
>https://wiki.hyprland.org/FAQ/index.html#how-do-i-change-me-mouse-cursor&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/swaywm/sway/wiki/GTK-3-settings-on-Wayland" target="_blank" rel="noopener"
>https://github.com/swaywm/sway/wiki/GTK-3-settings-on-Wayland&lt;/a>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h2 id="problems">Problems&lt;/h2>
&lt;ol>
&lt;li>&lt;code>nm-applet&lt;/code> not appears on Waybar tray (at least for me), so I use &lt;code>nmtui&lt;/code> in terminal to manage my network connection instead.&lt;/li>
&lt;li>&lt;code>megasync&lt;/code> not working properly&lt;/li>
&lt;li>&lt;code>jetbrains-toolbox&lt;/code> not appears on the Waybar tray.&lt;/li>
&lt;/ol>
&lt;h2 id="links">Links:&lt;/h2>
&lt;h3 id="applications">Applications&lt;/h3>
&lt;ol>
&lt;li>&lt;a class="link" href="https://arewewaylandyet.com/" target="_blank" rel="noopener"
>https://arewewaylandyet.com/&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://wiki.hyprland.org/Useful-Utilities/" target="_blank" rel="noopener"
>https://wiki.hyprland.org/Useful-Utilities/&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/swaywm/sway/wiki/Useful-add-ons-for-sway" target="_blank" rel="noopener"
>https://github.com/swaywm/sway/wiki/Useful-add-ons-for-sway&lt;/a>&lt;/li>
&lt;/ol>
&lt;h3 id="guides">Guides&lt;/h3>
&lt;ol>
&lt;li>&lt;a class="link" href="https://www.fosskers.ca/en/blog/wayland" target="_blank" rel="noopener"
>Full Wayland Setup on Arch Linux&lt;/a>&lt;/li>
&lt;/ol></description></item></channel></rss>